#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура обновления доступности элементов формы при ее открытии.
//
// Параметры:
//  Отказ - Булево - Признак отказа от открытия формы. Если в процедуре присвоить данному параметру значение Истина,
//                 то форма не будет открыта.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДоступностьЭлементов();
КонецПроцедуры

// Процедура, вызываемая при вставке данных из буфера обмена.
//
// Параметры:
//  Значение - Произвольный - Значение, вставляемое из буфера обмена.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события.
//
// Описание:
//  Процедура вызывает процедуру РаботаСБуфером, которая обрабатывает данные из буфера обмена.
//  Стандартная обработка события не требуется,
// поэтому параметр СтандартнаяОбработка устанавливается в Ложь внутри процедуры РаботаСБуфером.
&НаКлиенте
Процедура ПриВставкеИзБуфераОбмена(Значение, СтандартнаяОбработка)
	
	РаботаСБуфером();
	
КонецПроцедуры

// Процедура проверяет наличие полных прав у пользователя и устанавливает отбор по департаменту "Складской департамент"
// для элемента формы ТЗДанныеФизЛицо, если полных прав нет.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события создания формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если Не ПолныеПрава Тогда
		Департамент = Справочники.ПЛ_Департамент_ЗУП.НайтиПоНаименованию("Складской департамент", Истина);
		ПараметрыВыбора = Новый Структура("Отбор.ПЛ_Департамент_ЗУП", Департамент);
		Элементы.ТЗДанныеФизЛицо.ПараметрыВыбора = ПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает выбор физического лица в поле "ФизЛицоПриемник".
//
// Параметры:
//  Элемент - ПолеФормы - Поле формы, в котором был сделан выбор.
//  ВыбранноеЗначение - СправочникСсылка.ФизическиеЛица - Выбранное физическое лицо.
//  ДополнительныеДанные - Произвольный - Дополнительные данные выбора.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
&НаКлиенте
Процедура ФизЛицоПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательПриемник = ПользовательПоФизическомуЛицу(ВыбранноеЗначение);
	
	Если Не ЗначениеЗаполнено(ПользовательПриемник) Тогда
		Возврат;
	КонецЕсли;
	
	АутентификацияПользователя = АутентификацияПользователяНаСервере(ПользовательПриемник);
	
	ПользовательИБАутентификацияСтандартнаяПриемник = АутентификацияПользователя.АутентификацияСтандартная;
	ПользовательИБАутентификацияОСПриемник = АутентификацияПользователя.АутентификацияОС;
	ПользовательИБПользовательОСПриемник = АутентификацияПользователя.ПользовательОС;
	
	ОчиститьЗаполнитьТЧ("ГруппыПользователейПриемника", ПользовательПриемник, "ГруппыПользователей");
	ОчиститьЗаполнитьТЧ("ГруппыДоступаПриемника", ПользовательПриемник, "ГруппыДоступа");
	
	Попытка
		ПотребоватьСменуПароляПриВходеПриемник = ПотребоватьСменуПароляПриВходе(ПользовательПриемник);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ДоступСкладыТСД(ПользовательПриемник, ДоступВТСДПриемник, СкладыТСДПриемник);
	
	ОбновитьДоступностьЭлементов();
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" элемента формы "ПользовательИБПользовательОСИсточник".
// Открывает форму выбора пользователя операционной системы для заполнения реквизита.
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы, для которого произошло событие.
//  ДанныеВыбора - СписокЗначений - список значений для выбора.
//  ВыборДобавлением - Булево - признак выбора добавлением.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
&НаКлиенте
Процедура ПользовательИБПользовательОСИсточникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
КонецПроцедуры

// Открывает форму выбора пользователя операционной системы для элемента формы "ПользовательИБПользовательОСПриемник".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент формы, для которого необходимо открыть форму выбора.
//  ДанныеВыбора - СписокЗначений - Список значений для выбора.
//  ВыборДобавлением - Булево - Признак выбора добавлением.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
&НаКлиенте
Процедура ПользовательИБПользовательОСПриемникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
КонецПроцедуры

// Обработчик события "ПриИзменении" элемента формы "ПользовательИБАутентификацияОСПриемник".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент формы, для которого произошло событие.
//
// Описание:
//  Обновляет доступность элементов формы в зависимости от значения элемента "ПользовательИБАутентификацияОСПриемник".
&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриемникПриИзменении(Элемент)
	ОбновитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТЗДанные

// Процедура обработки выбора значения в элементе таблицы ТЗДанные.
//
// Параметры:
//  Элемент - ПолеФормы - элемент таблицы ТЗДанные, в котором было выбрано значение.
//  ВыбранноеЗначение - <Тип значения, выбранного в элементе таблицы> - выбранное значение.
//  ДополнительныеДанные - Произвольный - дополнительные данные, переданные в событие.
//  СтандартнаяОбработка - Булево - флаг стандартной обработки события.
//
&НаКлиенте
Процедура ТЗДанныеФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Пользователь = ТЗДанныеФизЛицоОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.ТЗДанные.ТекущиеДанные.Пользователь = Пользователь;
		Элементы.ТЗДанные.ТекущиеДанные.Авторизация = СвойстваПользователяИБНаСервере(Пользователь);
	ИначеЕсли Пользователь = Неопределено Тогда
		ЭтотОбъект.ТЗДанные.Удалить(Элементы.ТЗДанные.ТекущиеДанные);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Произошла нештатная ситуация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвойстваПользователяИБНаСервере(Знач Пользователь)
	НаименованиеПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Наименование");
	Возврат Пользователи.СвойстваПользователяИБ(НаименованиеПользователя).АутентификацияСтандартная;
КонецФункции

// Функция ищет пользователя по выбранному физическому лицу с учетом прав доступа
// и принадлежности сотрудника к определенному департаменту и должности.
//
// Параметры:
//  ВыбранноеЗначение - СправочникСсылка.ФизическиеЛица - Физическое лицо, для которого ищется пользователь.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Найденный пользователь или Неопределено,
// если пользователь не найден или не пройдена проверка прав доступа.
//
&НаСервере
Функция ТЗДанныеФизЛицоОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)
	
	Если Не ПолныеПрава Тогда
		
		РекСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение,
			"ПЛ_Департамент_ЗУП, ПЛ_Должность");
		
		Если ПроверкаДепартаментаИДолжности(РекСотрудника) Тогда
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПользовательПоФизическомуЛицу(ВыбранноеЗначение);
	
КонецФункции

// Проверяет соответствие департамента и должности сотрудника заданным значениям.
//
// Параметры:
//  РекСотрудника - Структура - Реквизиты сотрудника, содержащие поля ПЛ_Департамент_ЗУП и ПЛ_Должность.
//
// Возвращаемое значение:
//  Булево - Истина, если департамент сотрудника равен текущему департаменту
// и должность сотрудника является одной из: Кладовщик, Контролер или Приемщик.
//
&НаСервере
Функция ПроверкаДепартаментаИДолжности(Знач РекСотрудника)
	Возврат Департамент = РекСотрудника.ПЛ_Департамент_ЗУП
		И (РекСотрудника.ПЛ_Должность = Справочники.ПЛ_Должности.Кладовщик
			Или РекСотрудника.ПЛ_Должность = Справочники.ПЛ_Должности.Контролер
			Или РекСотрудника.ПЛ_Должность = Справочники.ПЛ_Должности.Приемщик);
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

// Асинхронно вызывает процедуру РаботаСБуфером для вставки данных из буфера обмена.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру.
//
&НаКлиенте
Процедура ВставитьИзБуфера(Команда)
	
	РаботаСБуфером();
	
КонецПроцедуры

// Проверяет доступность буфера обмена, извлекает данные из него, разделяет их на строки и заполняет таблицу значений.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Асинх Процедура РаботаСБуфером()
	
	Если Не СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		ПредупреждениеАсинх("Использование буфера обмена не доступно!");
		Возврат;
	КонецЕсли;
	
	ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Текст;
	
	Если Ждать СредстваБуфераОбмена.СодержитДанныеАсинх(ФорматДанных) Тогда
		
		РезультатБуфера = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(ФорматДанных);
		
		ЗаполнитьТаблицуЗначений(СтрРазделить(РезультатБуфера, Символы.ПС));
		
		ПересчитатьНомераСтрокТЗ();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений на основе массива строк и данных из справочников ФизическиеЛица и Пользователи.
//
// Параметры:
//  МассивСтрок - Массив - массив строк,
// содержащий ФИО и доступы пользователей в формате "ФИО<TAB>Доступ1С<TAB>ДоступТСД".
//
&НаСервере
Процедура ЗаполнитьТаблицуЗначений(Знач МассивСтрок)
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	
	ТаблицаПользователей.Колонки.Добавить("ФИО");
	ТаблицаПользователей.Колонки.Добавить("Доступ1С");
	ТаблицаПользователей.Колонки.Добавить("ДоступТСД");
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ФИОИДоступы = СтрРазделить(Строка, Символы.Таб);
		
		Если ФИОИДоступы.Количество() = 3 Тогда
			
			НоваяСтрока = ТаблицаПользователей.Добавить();
			
			НоваяСтрока.ФИО = ФИОИДоступы[0];
			НоваяСтрока.Доступ1С = ФИОИДоступы[1];
			НоваяСтрока.ДоступТСД = СокрЛП(ФИОИДоступы[2]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФизическиеЛица.Ссылка, НЕОПРЕДЕЛЕНО) КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_ФизЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование В(&Наименование)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Пользователи.Ссылка, НЕОПРЕДЕЛЕНО) КАК Пользователь,
		|	ВТ_ФизЛица.ФизЛицо КАК ФизЛицо,
		|	ВТ_ФизЛица.ФизЛицо.Наименование КАК ФизЛицоНаименование
		|ИЗ
		|	ВТ_ФизЛица КАК ВТ_ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТ_ФизЛица.ФизЛицо = Пользователи.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Наименование", ТаблицаПользователей.ВыгрузитьКолонку("ФИО"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса Из РезультатЗапроса Цикл
		
		НоваяСтрока = ТЗДанные.Добавить();
		
		НоваяСтрока.ФизЛицо = СтрокаЗапроса.ФизЛицо;
		НоваяСтрока.Пользователь = СтрокаЗапроса.Пользователь;
		НоваяСтрока.Склады = СкладыДляЗагрузки;
		
		НайденнаяСтрока = ТаблицаПользователей.Найти(СтрокаЗапроса.ФизЛицоНаименование);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НоваяСтрока.ДоступВ1С = НайденнаяСтрока.Доступ1С;
			НоваяСтрока.ДоступВТСД = НайденнаяСтрока.ДоступТСД;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит настройки пользователя из источника в приемник.
//
// Параметры:
//  Команда - <Тип не определен> - Не используется в процедуре.
//
// Описание:
//  Процедура копирует настройки аутентификации, группы пользователей и группы доступа из источника в приемник.
//  Если флаг ОчищатьНастройкиПриемника установлен, то настройки приемника будут очищены перед копированием.
//  Дополнительно копируются настройки доступа в ТСД и склады ТСД.
//  После копирования настроек вызывается процедура ОбновитьДоступностьЭлементов.
&НаКлиенте
// Процедура копирования настроек пользователя из источника в приемник
// Параметр Команда - содержит контекст выполнения команды (не используется в текущей реализации)
Процедура СкопироватьНастройки(Команда)
	
	// Копируем настройки аутентификации из источника в приемник
	// Стандартная аутентификация (логин/пароль 1С)
	ПользовательИБАутентификацияСтандартнаяПриемник = ПользовательИБАутентификацияСтандартнаяИсточник;
	// Аутентификация через операционную систему (доменная)
	ПользовательИБАутентификацияОСПриемник = ПользовательИБАутентификацияОСИсточник;
	
	// Если установлен флаг очистки настроек приемника
	Если ОчищатьНастройкиПриемника Тогда
		// Очищаем таблицы групп пользователей и доступа в приемнике
		ГруппыПользователейПриемника.Очистить();
		ГруппыДоступаПриемника.Очистить();
	КонецЕсли;
	
	// Вызываем процедуры копирования различных настроек:
	// 1. Копирование групп пользователей
	СкопироватьГруппыПользователей();
	// 2. Копирование групп доступа
	СкопироватьГруппыДоступа();
	// 3. Копирование настроек складов для ТСД
	СкопироватьСкладыТСД();
	
	// Обновляем доступность элементов интерфейса
	// (например, кнопок, связанных с настройками пользователя)
	ОбновитьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура копирования групп пользователей из источника в приемник
&НаСервере
Процедура СкопироватьГруппыПользователей()
	
	// Перебираем все строки таблицы значений-источника групп пользователей
	Для Каждого СтрокаТЗ Из ГруппыПользователейИсточника Цикл
		
		// Создаем структуру для поиска группы в приемнике
		ОтборПоиска = Новый Структура("ГруппаПользователей", СтрокаТЗ.ГруппаПользователей);
		
		// Если группа не найдена в приемнике - добавляем ее
		Если ГруппыПользователейПриемника.НайтиСтроки(ОтборПоиска).Количество() = 0 Тогда
			НоваяСтрока = ГруппыПользователейПриемника.Добавить();
			НоваяСтрока.ГруппаПользователей = СтрокаТЗ.ГруппаПользователей;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура копирования групп доступа из источника в приемник
&НаСервере
Процедура СкопироватьГруппыДоступа()
	
	// Перебираем все строки таблицы значений-источника групп доступа
	Для Каждого СтрокаТЗ Из ГруппыДоступаИсточника Цикл
		
		// Создаем структуру для поиска группы в приемнике
		ОтборПоиска = Новый Структура("ГруппаДоступа", СтрокаТЗ.ГруппаДоступа);
		НайденныеСтроки = ГруппыДоступаПриемника.НайтиСтроки(ОтборПоиска);
		
		// Если группа не найдена в приемнике
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			// Проверяем, нужно ли исключать группы с инцидентами
			// Ищем в наименовании группы слово "инцидент"
			Если НеПереноситьИнциденты И СтрНайти(НРег(СтрокаТЗ.ГруппаДоступа.Наименование), "инцидент") > 0 Тогда
				// Пропускаем добавление этой группы
				Продолжить;
			КонецЕсли;
			
			// Добавляем новую группу доступа в приемник
			НоваяСтрока = ГруппыДоступаПриемника.Добавить();
			НоваяСтрока.ГруппаДоступа = СтрокаТЗ.ГруппаДоступа;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура копирования складов ТСД из источника в приемник
&НаСервере
Процедура СкопироватьСкладыТСД()
	
	// Копируем доступ в ТСД целиком
	ДоступВТСДПриемник = ДоступВТСДИсточник;
	
	// Обрабатываем склады ТСД в зависимости от настроек
	Если ОчищатьНастройкиПриемника Тогда
		// Если нужно очистить приемник - просто копируем все склады из источника
		СкладыТСДПриемник = СкладыТСДИсточник.Скопировать();
	Иначе
		// Иначе добавляем только те склады, которых еще нет в приемнике
		Для Каждого СтрСкладыТСД Из СкладыТСДИсточник Цикл
			РезультатПоиска = СкладыТСДПриемник.НайтиПоЗначению(СтрСкладыТСД.Значение);
			Если РезультатПоиска = Неопределено Тогда
				СкладыТСДПриемник.Добавить(СтрСкладыТСД.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура переносит настройки пользователей с источника на приемник.
//
// Параметры:
//  ПользовательИБАутентификацияСтандартнаяИсточник
// - СправочникСсылка.Пользователи - Пользователь источника с аутентификацией стандартной.
//  ПользовательИБАутентификацияОСИсточник
// - СправочникСсылка.Пользователи - Пользователь источника с аутентификацией ОС.
//  ГруппыПользователейИсточника - ТаблицаЗначений - Таблица групп пользователей источника.
//  ГруппыПользователейПриемника - ТаблицаЗначений - Таблица групп пользователей приемника.
//  Объект - УправляемаяФорма - Форма объекта, содержащая таблицу ГруппыПользователейПриемника.
//
&НаСервере
Процедура ПеренестиНастройкиНаСервере()
	
	// 1. Переносим настройки аутентификации:
	// - Стандартная аутентификация 1С (логин/пароль)
	ПользовательИБАутентификацияСтандартнаяПриемник = ПользовательИБАутентификацияСтандартнаяИсточник;
	// - Аутентификация через ОС (доменная/Windows-аутентификация)
	ПользовательИБАутентификацияОСПриемник = ПользовательИБАутентификацияОСИсточник;
	
	// 2. Переносим группы пользователей:
	// Для каждой группы в источнике проверяем наличие в приемнике
	Для Каждого СтрокаТЗ Из ГруппыПользователейИсточника Цикл
		
		// Создаем критерий поиска группы в приемнике
		// (по полю "ГруппаПользователей")
		ОтборПоиска = Новый Структура("ГруппаПользователей", СтрокаТЗ.ГруппаПользователей);
		
		// Ищем группу в приемнике по заданному критерию
		НайденныеСтроки = Объект.ГруппыПользователейПриемника.НайтиСтроки(СтрокаТЗ);
		
		// Если группа не найдена в приемнике - добавляем ее
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			// Создаем новую строку в таблице групп приемника
			НоваяСтрока = ГруппыПользователейПриемника.Добавить();
			// Копируем значение группы из источника
			НоваяСтрока.ГруппаПользователей = СтрокаТЗ.ГруппаПользователей;
			
			// Примечание: здесь можно добавить копирование других полей группы,
			// если они присутствуют в структуре данных
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Примечание для расширения функционала:
	// Здесь можно добавить перенос других настроек (групп доступа, прав и т.д.)
	// по аналогии с группами пользователей
	
КонецПроцедуры

// Копирует настройки на сервере.
//
// Параметры:
//  Команда - КомандаФормы - Не используется в процедуре, требуется для соответствия сигнатуре обработчика команды.
//
&НаКлиенте
Процедура УстановитьНастройки(Команда)
	УстановитьНастройкиНаСервере();
КонецПроцедуры

// Процедура установки настроек пользователя на сервере
// Выполняет комплексную настройку пользователя, включая:
// - Основные параметры учетной записи
// - Группы доступа
// - Настройки ТСД (терминалов сбора данных)
// - Интеграцию с Битрикс24
&НаСервере
Процедура УстановитьНастройкиНаСервере()
	
	// Флаг для прерывания обработки при ошибках валидации
	ПрерватьОбработку = Ложь;
	
	// 1. ВАЛИДАЦИЯ ВХОДНЫХ ДАННЫХ
	Если Не ПроверитьЗаполнениеПередУстановкой() Тогда
		Возврат;
	КонецЕсли;
	
	// 2. НАСТРОЙКА ОСНОВНЫХ ПАРАМЕТРОВ
	
	// По умолчанию не задаем пароль (может быть изменено в УстановитьОсновныеНастройки)
	ЗадаватьПароль = Ложь;
	
	// Установка основных параметров пользователя
	УстановитьОсновныеНастройки(ЗадаватьПароль);
	
	// Добавление пользователя в группы доступа
	ДобавитьПользователяВГруппы();
	
	// 3. ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ
	
	// Копирование настроек из пользователя-источника (если включено)
	Если КопироватьНастройки Тогда
		СкопироватьВсеНастройки(ПользовательИсточник, ПользовательПриемник);
	КонецЕсли;
	
	// Обработка настроек для ТСД (терминалов сбора данных)
	ОбработатьНастройкиТСД();
	
	// 4. ИНТЕГРАЦИОННЫЕ ДЕЙСТВИЯ
	
	// Отправка уведомления в Битрикс24 о выполненных настройках
	ОтправитьКомментарийВБитриксНастройки(ЗадаватьПароль);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПередУстановкой()
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(ФизЛицоПриемник) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнено физическое лицо", , "ФизЛицоПриемник");
		Результат = Ложь;
	КонецЕсли;
	
	Если ПользовательИБАутентификацияОСПриемник 
		И Не ЗначениеЗаполнено(ПользовательИБПользовательОСПриемник) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен пользователь ОС", , "ПользовательИБПользовательОСПриемник");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура установки основных настроек пользователя
// Параметр ЗадаватьПароль - определяет, нужно ли устанавливать пароль пользователю
&НаСервере
Процедура УстановитьОсновныеНастройки(ЗадаватьПароль)
	// Создаем соответствие для передачи данных о пользователе
	СоответствиеПользователя1С = Новый Соответствие;
	СоответствиеПользователя1С.Вставить("ФизЛицо", ФизЛицоПриемник);
	СоответствиеПользователя1С.Вставить("Пользователь", ПользовательПриемник);
	СоответствиеПользователя1С.Вставить("ВременныйПароль", "");
	
	// Определяем, нужно ли задавать пароль, на основе настроек аутентификации
	ЗадаватьПароль = ПользовательИБАутентификацияСтандартнаяПриемник И ПотребоватьСменуПароляПриВходеПриемник;
	
	// Получаем свойства пароля (сложность, длина и т.д.)
	СвойстваПароля = СвойстваПароля();
	
	// Добавляем или обновляем пользователя в 1С с указанными параметрами
	ДобавитьОбновитьПользователя1С(СоответствиеПользователя1С, ЗадаватьПароль, СвойстваПароля,
	ПользовательИБАутентификацияОСПриемник, ПользовательИБПользовательОСПриемник,
	ПользовательИБАутентификацияСтандартнаяПриемник);
	
	// Обновляем данные после обработки
	ПользовательПриемник = СоответствиеПользователя1С["Пользователь"];
	ВременныйПарольПриемник = СоответствиеПользователя1С["ВременныйПароль"];
	
	// Если требуется смена пароля при входе
	Если ПотребоватьСменуПароляПриВходеПриемник Тогда
		// Создаем запись в регистре сведений, чтобы пользователь
		// обязан был сменить пароль при входе в 1С.
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПользовательПриемник);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			// Если запись не найдена - создаем новую
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = ПользовательПриемник;
		Иначе
			// Иначе используем существующую запись
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		// Устанавливаем флаг смены пароля
		СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Процедура добавления пользователя в группы
&НаСервере
Процедура ДобавитьПользователяВГруппы()
	// Создаем структуру для поиска пользователя в группах
	СтруктураДляПоиска = Новый Структура("Пользователь", ПользовательПриемник);
	
	// Перед добавлением пользователя в группы сначала удаляем его
	// со всех групп (если установлен соответствующий флаг)
	Если УдалятьИзГрупп Тогда
		УдалитьПользователяИзГрупп(СтруктураДляПоиска);
	КонецЕсли;
	
	// Добавление пользователя в группы
	ДобавитьПользователяВГруппу(СтруктураДляПоиска);
КонецПроцедуры

// Процедура удаления пользователя из всех групп
// Параметр СтруктураДляПоиска - содержит данные для поиска пользователя в группах
&НаСервере
Процедура УдалитьПользователяИзГрупп(СтруктураДляПоиска)
	// Обрабатываем группы пользователей
	Для Каждого ГруппаПользователей Из ГруппыДоступаПользователя(ПользовательПриемник, "ГруппыПользователей") Цикл
		// Получаем объект группы пользователей
		ГруппаПользователейОбъект = ГруппаПользователей.ГруппаПользователей.ПолучитьОбъект();
		
		// Ищем пользователя в составе группы
		НайденныеЗначения = ГруппаПользователейОбъект.Состав.НайтиСтроки(СтруктураДляПоиска);
		
		// Если пользователь найден в группе - удаляем его
		Если ЗначениеЗаполнено(НайденныеЗначения) Тогда
			ГруппаПользователейОбъект.Состав.Удалить(ГруппаПользователейОбъект.Состав.Индекс(НайденныеЗначения[0]));
			ГруппаПользователейОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Аналогично обрабатываем группы доступа
	Для Каждого ГруппаДоступа Из ГруппыДоступаПользователя(ПользовательПриемник, "ГруппыПользователей") Цикл
		ГруппаДоступаОбъект = ГруппаДоступа.ГруппаДоступа.ПолучитьОбъект();
		
		НайденныеЗначения = ГруппаДоступаОбъект.Пользователи.НайтиСтроки(СтруктураДляПоиска);
		
		Если ЗначениеЗаполнено(НайденныеЗначения) Тогда
			ГруппаДоступаОбъект.Пользователи.Удалить(ГруппаДоступаОбъект.Пользователи.Индекс(НайденныеЗначения[0]));
			ГруппаДоступаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура добавления пользователя в группы
// Параметр СтруктураДляПоиска - содержит данные для поиска пользователя в группах
&НаСервере
Процедура ДобавитьПользователяВГруппу(СтруктураДляПоиска)
	// Обрабатываем группы пользователей
	Для Каждого ГруппаПользователей Из ГруппыПользователейПриемника Цикл
		ГруппаПользователейОбъект = ГруппаПользователей.ГруппаПользователей.ПолучитьОбъект();
		
		// Проверка наличия пользователя в группе (чтобы избежать дублирования)
		НайденныеЗначения = ГруппаПользователейОбъект.Состав.НайтиСтроки(СтруктураДляПоиска);
		
		// Если пользователь не найден в группе - добавляем его
		Если Не ЗначениеЗаполнено(НайденныеЗначения) Тогда
			НоваяСтрокаГруппаПользователей = ГруппаПользователейОбъект.Состав.Добавить();
			НоваяСтрокаГруппаПользователей.Пользователь = ПользовательПриемник;
			ГруппаПользователейОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Аналогично обрабатываем группы доступа
	Для Каждого ГруппаДоступа Из ГруппыДоступаПриемника Цикл
		ГруппаДоступаОбъект = ГруппаДоступа.ГруппаДоступа.ПолучитьОбъект();
		
		НайденныеЗначения = ГруппаДоступаОбъект.Пользователи.НайтиСтроки(СтруктураДляПоиска);
		
		Если Не ЗначениеЗаполнено(НайденныеЗначения) Тогда
			НоваяСтрокаГруппаДоступа = ГруппаДоступаОбъект.Пользователи.Добавить();
			НоваяСтрокаГруппаДоступа.Пользователь = ПользовательПриемник;
			ГруппаДоступаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура обработки настроек ТСД (терминалов сбора данных)
&НаСервере
Процедура ОбработатьНастройкиТСД()
	
	// Если указаны доступ и склады ТСД - обновляем настройки
	Если ЗначениеЗаполнено(ДоступВТСДПриемник) И ЗначениеЗаполнено(СкладыТСДПриемник) Тогда
		СтруктураПользовательСклады = Новый Структура("Пользователь, Склады, ДоступВТСД",
		ПользовательПриемник, СкладыТСДПриемник, ДоступВТСДПриемник);
		ДобавитьОбновитьПользователяТСД(СтруктураПользовательСклады);
	КонецЕсли;
КонецПроцедуры

// Процедура отправки комментария в Битрикс24
// Параметр ЗадаватьПароль - определяет, нужно ли включать пароль в комментарий
&НаСервере
Процедура ОтправитьКомментарийВБитриксНастройки(Знач ЗадаватьПароль)
	// Проверяем, указан ли номер задачи в Битрикс
	Если ЗначениеЗаполнено(НомерЗадачиБитрикс) Тогда
		НомерЗадачи = СокрЛП(НомерЗадачиБитрикс);
		КомментарийДляЗадачи = "Готово.";
		
		// Если нужно добавить временный пароль
		Если ЗадаватьПароль И ЗначениеЗаполнено(ВременныйПарольПриемник) Тогда
			КомментарийДляЗадачи = КомментарийДляЗадачи + " Временный пароль:" + Символы.ПС
			+ ПользовательПриемник + " - " + ВременныйПарольПриемник;
		Иначе
			КомментарийДляЗадачи = КомментарийДляЗадачи + Символы.ПС +
			ПользовательПриемник;
		КонецЕсли;
		
		// Добавляем информацию о доменной аутентификации, если она используется
		Если ПользовательИБАутентификацияОСПриемник И ЗначениеЗаполнено(ПользовательИБПользовательОСПриемник) Тогда
			КомментарийДляЗадачи = КомментарийДляЗадачи + Символы.ПС + "Вход доменный.";
		КонецЕсли;
		
		// Отправляем комментарий в задачу Битрикс24 (17029 - идентификатор пользователя 1С в Битрикс)
		ПЛ_Битрикс24.ОтправитьКомментарийВЗадачу(НомерЗадачи, КомментарийДляЗадачи, "17029");
		
		// Если нужно делегировать задачу обратно постановщику
		Если ДелегироватьЗадачу Тогда
			Результат = ПолучитьИДПостановщикаЗадачи(НомерЗадачи);
			Ответ1С = ПЛ_МодульВебСервисов.ПреобразоватьИЗJSON(Результат.ПолучитьТелоКакСтроку(),,Истина);
			ИДПоставновщика = Ответ1С.Получить("result").Получить("task").Получить("createdBy");
			ДелегироватьЗадачу(НомерЗадачи, ИДПоставновщика);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет поиск пользователя в справочнике "Пользователи" по связанному физическому лицу
//
// Параметры:
//   ФизЛицо - Ссылка на физическое лицо в справочнике, для которого ищем пользователя
//
// Возвращаемое значение:
//   Ссылка на найденного пользователя или пустая ссылка, если пользователь не найден
&НаСервереБезКонтекста
Функция ПользовательПоФизическомуЛицу(Знач ФизЛицо)
	
	// Инициализируем результат пустой ссылкой (значение по умолчанию)
	Результат = Справочники.Пользователи.ПустаяСсылка();
	
	// Создаем новый объект запроса
	Запрос = Новый Запрос;
	
	// Устанавливаем текст запроса:
	// - Выбираем только первого найденного пользователя (ПЕРВЫЕ 1)
	// - Ищем по совпадению с физическим лицом
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|   Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|   Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|   Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
	
	// Устанавливаем параметр запроса - переданное физическое лицо
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицо);
	
	// Выполняем запрос к базе данных
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если запрос вернул не пустой результат
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем выборку результатов
		Выборка = РезультатЗапроса.Выбрать();
		// Переходим к первой записи в выборке
		Выборка.Следующий();
		
		// Запоминаем найденного пользователя
		Результат = Выборка.Пользователь;
		
	КонецЕсли;
	
	// Возвращаем результат (найденного пользователя или пустую ссылку)
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру с параметрами для отправки данных о пользователе в ТСД.
//
// Возвращаемое значение:
//  Структура - Параметры пользователя, содержащая следующие ключи:
//    * id - Строка - Идентификатор пользователя.
//    * name - Строка - Имя пользователя.
//    * password - Строка - Пароль пользователя.
//    * description - Строка - Описание пользователя.
//    * barcode - Строка - Штрихкод пользователя.
//    * groupId - Строка - Идентификатор группы пользователя.
//    * groupName - Строка - Наименование группы пользователя.
//    * warehouseIds - Массив - Идентификаторы складов, к которым имеет доступ пользователь.
&НаСервереБезКонтекста
Функция ПараметрыОтправкиПользователя()
	
	Результат = Новый Структура;
	Результат.Вставить("id", "");
	Результат.Вставить("name", "");
	Результат.Вставить("password", "");
	Результат.Вставить("description", "");
	Результат.Вставить("barcode", "");
	Результат.Вставить("groupId", "");
	Результат.Вставить("groupName", "");
	Результат.Вставить("warehouseIds", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Процедура для выполнения команды "Завести пользователей".
//
// Параметры:
//  Команда - <Тип команды> - Команда, которая вызвала процедуру.
//
// Процедура проверяет заполнение данных и вызывает процедуру ЗавестиПользователейНаСервере.
&НаКлиенте
Процедура ЗавестиПользователей(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗавестиПользователейНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура создания пользователей на сервере с назначением групп доступа
// Основные функции:
// 1. Поиск и подготовка групп пользователей
// 2. Настройка параметров паролей
// 3. Обработка каждого пользователя из таблицы данных
// 4. Сохранение изменений в группах доступа
&НаСервере
Процедура ЗавестиПользователейНаСервере()
	
	// 1. ПОЛУЧЕНИЕ ГРУПП ДОСТУПА
	
	// Находим и получаем объект группы "Сотрудник склада"
	// Второй параметр (Истина) - регистронезависимый поиск
	ГДКонтроль = Справочники.ГруппыПользователей.НайтиПоНаименованию("Сотрудник склада", Истина).ПолучитьОбъект();
	
	// Находим и получаем объект группы "Сотрудник приемки"
	ГДПриемка = Справочники.ГруппыПользователей.НайтиПоНаименованию("Сотрудник приемки", Истина).ПолучитьОбъект();
	
	// 2. НАСТРОЙКА ПАРАМЕТРОВ ПАРОЛЕЙ
	
	// Получаем настройки сложности паролей (длина, использование спецсимволов и т.д.)
	СвойстваПароля = СвойстваПароля();
	
	// 3. ОБРАБОТКА ПОЛЬЗОВАТЕЛЕЙ
	
	// Перебираем всех пользователей из таблицы значений ТЗДанные
	Для Каждого СтрокаПользователя Из ТЗДанные Цикл
		// Обрабатываем каждого пользователя:
		// - Создание учетной записи
		// - Настройка параметров
		// - Добавление в соответствующие группы
		ОбработатьПользователя(СтрокаПользователя, ГДКонтроль, ГДПриемка, СвойстваПароля);
	КонецЦикла;
	
	// 4. СОХРАНЕНИЕ ИЗМЕНЕНИЙ
	
	// Записываем изменения в группах доступа после добавления всех пользователей
	Попытка
		ГДКонтроль.Записать();
		ГДПриемка.Записать();
	Исключение
		// Обработка ошибок записи
	КонецПопытки;
	
КонецПроцедуры

// Процедура обработки данных пользователя и настройки его учетной записи
// Параметры:
//  СтрокаПользователя - строка таблицы значений с данными пользователя
//  ГДКонтроль - группа доступа "Сотрудник склада"
//  ГДПриемка - группа доступа "Сотрудник приемки"
//  СвойстваПароля - настройки сложности паролей
&НаСервере
Процедура ОбработатьПользователя(СтрокаПользователя, ГДКонтроль, ГДПриемка, СвойстваПароля)
	
	// 1. ПОДГОТОВКА ДАННЫХ
	СтрокаКонтроль = "Контроль"; // Константа для сравнения типа доступа
	СтрокаПриемка = "Приемка"; // Константа для сравнения типа доступа
	СтрокаПользователь = "Пользователь"; // Ключ для соответствия
	
	// Структура для поиска пользователя в группах доступа
	СтруктураДляПоиска = Новый Структура(СтрокаПользователь, СтрокаПользователя.Пользователь);
	
	// Определяем нужно ли задавать пароль:
	// - Для пользователей с доступом "Контроль" или "Приемка"
	// - И не использующих авторизацию ОС
	ЗадаватьПароль = (СтрокаПользователя.ДоступВ1С = СтрокаКонтроль Или СтрокаПользователя.ДоступВ1С = СтрокаПриемка)
	И Не СтрокаПользователя.Авторизация;
	
	// 2. СОЗДАНИЕ/ОБНОВЛЕНИЕ УЧЕТНОЙ ЗАПИСИ
	СоответствиеПользователя1С = Новый Соответствие;
	СоответствиеПользователя1С.Вставить("ФизЛицо", СтрокаПользователя.ФизЛицо);
	СоответствиеПользователя1С.Вставить(СтрокаПользователь, СтрокаПользователя.Пользователь);
	СоответствиеПользователя1С.Вставить("ВременныйПароль", "");
	
	// Определяем тип авторизации (стандартная или ОС)
	АвторизацияСтандартная = СтрокаПользователя.Авторизация Или ЗадаватьПароль;
	
	// Создаем или обновляем пользователя в 1С
	ДобавитьОбновитьПользователя1С(СоответствиеПользователя1С, ЗадаватьПароль, СвойстваПароля, , ,
	АвторизацияСтандартная);
	
	// Обновляем данные после обработки
	СтрокаПользователя.Пользователь = СоответствиеПользователя1С[СтрокаПользователь];
	СтрокаПользователя.ВременныйПароль = СоответствиеПользователя1С["ВременныйПароль"];
	
	// 3. ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ
	// Если задавали пароль - требуем его смену при первом входе
	Если ЗадаватьПароль Тогда
		ПотребоватьСменуПароля(СтрокаПользователя);
	КонецЕсли;
	
	// Настройка доступа к ТСД (если указан)
	Если ЗначениеЗаполнено(СтрокаПользователя.ДоступВТСД) Тогда
		ДобавитьОбновитьПользователяТСД(СтрокаПользователя);
	КонецЕсли;
	
	// Отправка уведомления в Битрикс (если указана задача)
	Если ЗначениеЗаполнено(СтрокаПользователя.ЗадачаБитрикс) Тогда
		ОтправитьКомментарийВБитрикс(СтрокаПользователя, ЗадаватьПароль);
	КонецЕсли;
	
	// 4. НАЗНАЧЕНИЕ ГРУПП ДОСТУПА
	// Для пользователей с доступом "Приемка" или "Контроль"
	Если СтрокаПользователя.ДоступВ1С = СтрокаПриемка
		Или СтрокаПользователя.ДоступВ1С = СтрокаКонтроль Тогда
		
		// Пользователям приемки добавляем специальную группу
		Если СтрокаПользователя.ДоступВ1С = СтрокаПриемка Тогда
			ДобавитьВГруппуЕслиОтсутствует(ГДПриемка, СтрокаПользователя.Пользователь);
		КонецЕсли;
		
		// Всем добавляем базовую группу контроля
		ДобавитьВГруппуЕслиОтсутствует(ГДКонтроль, СтрокаПользователя.Пользователь);
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает требование смены пароля при следующем входе пользователя
// Параметр СтрокаПользователя - содержит данные пользователя (объект или строка таблицы значений)
&НаСервере
Процедура ПотребоватьСменуПароля(СтрокаПользователя)
	
	// Создаем набор записей регистра сведений "СведенияОПользователях"
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	
	// Устанавливаем отбор по текущему пользователю
	НаборЗаписей.Отбор.Пользователь.Установить(СтрокаПользователя.Пользователь);
	
	// Читаем существующие записи
	НаборЗаписей.Прочитать();
	
	// Если запись не найдена - создаем новую
	Если НаборЗаписей.Количество() = 0 Тогда
		СведенияОПользователе = НаборЗаписей.Добавить();
		СведенияОПользователе.Пользователь = СтрокаПользователя.Пользователь;
	Иначе
		// Иначе берем существующую запись
		СведенияОПользователе = НаборЗаписей[0];
	КонецЕсли;
	
	// Устанавливаем флаг обязательной смены пароля
	СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Истина;
	
	// Записываем изменения
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура добавляет пользователя в группу, если его там еще нет
// Параметры:
//   Группа - объект группы пользователей
//   Пользователь - ссылка на пользователя, которого нужно добавить
&НаСервере
Процедура ДобавитьВГруппуЕслиОтсутствует(Группа, Пользователь)
	
	// Ищем пользователя в составе группы
	НайденныеЗначения = Группа.Состав.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
	
	// Если пользователь не найден в группе - добавляем
	Если Не ЗначениеЗаполнено(НайденныеЗначения) Тогда
		НоваяСтрока = Группа.Состав.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура отправки комментария в задачу Битрикс24
// Параметры:
//   СтрокаПользователя - данные пользователя
//   ЗадаватьПароль - флаг, указывающий нужно ли включать пароль в комментарий
&НаСервере
Процедура ОтправитьКомментарийВБитрикс(СтрокаПользователя, ЗадаватьПароль)
	
	// Получаем и очищаем номер задачи
	НомерЗадачи = СокрЛП(СтрокаПользователя.ЗадачаБитрикс);
	
	// Базовый текст комментария
	КомментарийДляЗадачи = "Готово.";
	
	// Если нужно добавить временный пароль
	Если ЗадаватьПароль И ЗначениеЗаполнено(СтрокаПользователя.ВременныйПароль) Тогда
		КомментарийДляЗадачи = КомментарийДляЗадачи + " Временный пароль: " + Символы.ПС
		+ СтрокаПользователя.Пользователь + " - " + СтрокаПользователя.ВременныйПароль;
	Иначе
		// Иначе просто добавляем имя пользователя
		КомментарийДляЗадачи = КомментарийДляЗадачи + Символы.ПС + СтрокаПользователя.Пользователь;
	КонецЕсли;
	
	// Отправляем комментарий в задачу (17029 - ID приложения 1С в Битрикс)
	ПЛ_Битрикс24.ОтправитьКомментарийВЗадачу(НомерЗадачи, КомментарийДляЗадачи, "17029");
	
	// Получаем ID постановщика задачи для возможного делегирования
	Результат = ПолучитьИДПостановщикаЗадачи(НомерЗадачи);
	Ответ1С = ПЛ_МодульВебСервисов.ПреобразоватьИЗJSON(Результат.ПолучитьТелоКакСтроку(),,Истина);
	ИДПоставновщика = Ответ1С.Получить("result").Получить("task").Получить("createdBy");
	
	// Если установлен флаг делегирования - возвращаем задачу постановщику
	Если СтрокаПользователя.Делегировать Тогда
		ДелегироватьЗадачу(НомерЗадачи, ИДПоставновщика);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает и возвращает настроенное соединение с Bitrix24 REST API
//
// Возвращаемое значение:
//   Структура с двумя элементами:
//     - Заголовки: Соответствие с HTTP-заголовками для запросов
//     - Соединение: Объект HTTP-соединения с сервером Bitrix24
//
// Особенности:
//   - Использует защищенное SSL соединение
//   - Устанавливает стандартные заголовки для работы с JSON API
//   - Задает таймаут соединения 60 секунд
&НаСервереБезКонтекста
Функция ПолучитьСоединениеЗаголовкиСBitrix24()
	
	// 1. НАСТРОЙКА HTTP-ЗАГОЛОВКОВ
	// Создаем коллекцию заголовков для HTTP-запросов
	Заголовки = Новый Соответствие();
	
	// Устанавливаем необходимые заголовки:
	// - Тип содержимого - JSON
	Заголовки.Вставить("Content-Type", "application/json");
	// - Кодировка содержимого - UTF-8
	Заголовки.Вставить("Content-Charset", "utf-8");
	
	// 2. НАСТРОЙКА ПОДКЛЮЧЕНИЯ
	// Адрес сервера Bitrix24 с указанием REST endpoint
	// Включает идентификатор приложения (17029) и вебхук (3uedati105hxrgob)
	Сервер = "profitleague.bitrix24.ru/rest/17029/3uedati105hxrgob/";
	
	// Создаем объект для защищенного SSL соединения
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	// Создаем HTTP соединение с параметрами:
	// - Адрес сервера
	// - Таймаут 60 секунд
	// - SSL защита
	Соединение = Новый HTTPСоединение(Сервер, , , , , 60, ssl);
	
	// 3. ВОЗВРАТ РЕЗУЛЬТАТА
	// Возвращаем структуру с подготовленными:
	// - HTTP-заголовками
	// - Объектом соединения
	Возврат Новый Структура("Заголовки, Соединение", Заголовки, Соединение);
	
КонецФункции

// Функция делегирует задачу в Bitrix24 другому сотруднику
//
// Параметры:
//   ИДЗадачи - ID задачи в Bitrix24, которую нужно делегировать
//   НаКогоДелегировать - может быть:
//     * Ссылка на физическое лицо (справочник)
//     * ID сотрудника в Bitrix24 (число или строка)
//
// Возвращаемое значение:
//   Код состояния HTTP ответа от сервера Bitrix24
//
// Особенности:
//   - Экспортная функция (доступна из других модулей)
//   - Поддерживает оба варианта указания исполнителя
//   - Использует защищенное соединение с REST API Bitrix24
&НаСервереБезКонтекста
Функция ДелегироватьЗадачу(ИДЗадачи, Знач НаКогоДелегировать) Экспорт
	
	// 1. ПОДГОТОВКА СОЕДИНЕНИЯ
	// Получаем заранее настроенные параметры подключения к Bitrix24
	ПараметрыСоединения = ПолучитьСоединениеЗаголовкиСBitrix24();
	Заголовки = ПараметрыСоединения.Заголовки;       // HTTP-заголовки
	Соединение = ПараметрыСоединения.Соединение;    // Объект соединения
	
	// 2. ОПРЕДЕЛЕНИЕ ИСПОЛНИТЕЛЯ
	// REST API метод для делегирования задач
	АдресРесурса = "tasks.task.delegate";
	
	// Если передан объект физического лица (из справочника 1С)
	Если ТипЗнч(НаКогоДелегировать) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		// Получаем связанное физическое лицо
		ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаКогоДелегировать, "ФизическоеЛицо");
		// Конвертируем в ID сотрудника Bitrix24
		ИДСотрудника = ПЛ_Битрикс24.ПолучитьIDBitrix24ПоФизЛицу(ФизЛицо);
	Иначе
		// Если передан непосредственно ID (число или строка)
		ИДСотрудника = НаКогоДелегировать;
	КонецЕсли;
	
	// 3. ФОРМИРОВАНИЕ ЗАПРОСА
	// Создаем HTTP-запрос с указанными заголовками
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	// Подготавливаем структуру данных для отправки:
	// - ID задачи
	// - ID нового исполнителя
	ТестСтруктура = Новый Структура("taskId, userId", ИДЗадачи, ИДСотрудника);
	
	// Устанавливаем тело запроса в формате JSON
	HTTPЗапрос.УстановитьТелоИзСтроки(ПЛ_МодульВебСервисов.ПреобразоватьВJSON(ТестСтруктура));
	
	// 4. ОТПРАВКА ЗАПРОСА И ВОЗВРАТ РЕЗУЛЬТАТА
	// Отправляем запрос и возвращаем HTTP-код ответа
	// (200 - OK, 404 - задача не найдена и т.д.)
	Возврат Соединение.ОтправитьДляОбработки(HTTPЗапрос).КодСостояния;
	
КонецФункции

// Функция получает ID постановщика задачи в Bitrix24 по ID задачи
//
// Параметры:
//   ИДЗадачи - ID задачи в Bitrix24 (число или строка)
//
// Возвращаемое значение:
//   Объект HTTP-ответа от сервера Bitrix24, содержащий:
//   - Код состояния HTTP
//   - Тело ответа с информацией о задаче
//   - Заголовки ответа
//
// Особенности:
//   - Экспортная функция (доступна из других модулей)
//   - Использует REST API Bitrix24 (метод tasks.task.get)
//   - Запрашивает только поле CREATED_BY (постановщик задачи)
//   - Возвращает полный объект ответа для последующего парсинга
&НаСервереБезКонтекста
Функция ПолучитьИДПостановщикаЗадачи(ИДЗадачи) Экспорт
	
	// 1. ПОДГОТОВКА СОЕДИНЕНИЯ
	// Получаем заранее настроенные параметры подключения к Bitrix24
	// (заголовки и объект соединения)
	ПараметрыСоединения = ПолучитьСоединениеЗаголовкиСBitrix24();
	Заголовки = ПараметрыСоединения.Заголовки;       // HTTP-заголовки (Content-Type и др.)
	Соединение = ПараметрыСоединения.Соединение;    // Объект HTTP-соединения
	
	// 2. НАСТРОЙКА ЗАПРОСА
	// Используем API метод для получения информации о задаче
	// Документация: https://apidocs.bitrix24.ru/api-reference/tasks/tasks-task-get.html
	АдресРесурса = "tasks.task.get";
	
	// Создаем массив запрашиваемых полей
	// В данном случае нам нужно только поле CREATED_BY (ID постановщика)
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("CREATED_BY");
	
	// 3. ФОРМИРОВАНИЕ ЗАПРОСА
	// Создаем HTTP-запрос с указанными заголовками
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	// Подготавливаем структуру данных для отправки:
	// - ID задачи
	// - Массив запрашиваемых полей
	ТестСтруктура = Новый Структура("taskId, select", ИДЗадачи, МассивПолей);
	
	// Конвертируем структуру в JSON и устанавливаем как тело запроса
	HTTPЗапрос.УстановитьТелоИзСтроки(ПЛ_МодульВебСервисов.ПреобразоватьВJSON(ТестСтруктура));
	
	// 4. ОТПРАВКА ЗАПРОСА И ВОЗВРАТ РЕЗУЛЬТАТА
	// Отправляем запрос и возвращаем полный объект ответа
	// (для последующего парсинга в вызывающем коде)
	Возврат Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецФункции

// Возвращает структуру со свойствами пароля пользователя.
//
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//   * НаименьшаяДлина - Число - минимальная длина пароля.
//   * Сложный - Булево - требуется ли сложный пароль.
//   * УчестьНастройки - Строка - настройки для пароля.
&НаСервереБезКонтекста
Функция СвойстваПароля()
	
	СвойстваПароля = Пользователи.СвойстваПароля();
	СвойстваПароля.НаименьшаяДлина = 8;
	СвойстваПароля.Сложный = Истина;
	СвойстваПароля.УчестьНастройки = "ДляПользователей";
	
	Возврат СвойстваПароля;
	
КонецФункции

// Процедура-обработчик события "ПриИзменении" табличной части "ТЗДанные".
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы, связанный с табличной частью "ТЗДанные".
//
// Описание:
//  Процедура выполняет пересчет номеров строк в табличной части "ТЗДанные" после изменения данных.
//  Вызывает процедуру "ПересчитатьНомераСтрокТЗ" для выполнения пересчета.
&НаКлиенте
Процедура ТЗДанныеПриИзменении(Элемент)
	
	ПересчитатьНомераСтрокТЗ();
	
КонецПроцедуры

// Процедура пересчитывает номера строк в таблице значений ТЗДанные.
//
// Параметры:
//  Элемент - <Неопределено или "<Тип элемента>" - Необязательный параметр, не используется в процедуре.
//
&НаКлиенте
Процедура ПересчитатьНомераСтрокТЗ()
	
	Для каждого Стр Из ТЗДанные Цикл
		
		Стр.НомерСтроки = ТЗДанные.Индекс(Стр) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет или обновляет пользователя 1С.
//
// Параметры:
//  СоответствиеПользователя1С - Соответствие - Соответствие с данными пользователя 1С,
// где ключ "Пользователь" содержит ссылку на пользователя,
//                                         а ключ "ФизЛицо" - ссылку на физическое лицо.
//  ЗадаватьПароль - Булево - Признак необходимости задания пароля пользователю.
//  СвойстваПароля - Структура - Свойства пароля пользователя.
//  ПользовательИБАутентификацияОС - Булево - Признак аутентификации пользователя по учетной записи ОС.
//  ПользовательИБПользовательОС - Строка - Имя пользователя ОС.
//  ПользовательИБАутентификацияСтандартная - Булево - Признак стандартной аутентификации пользователя.
//
&НаСервереБезКонтекста
Процедура ДобавитьОбновитьПользователя1С(
	СоответствиеПользователя1С,
	ЗадаватьПароль,
	СвойстваПароля,
	ПользовательИБАутентификацияОС = Ложь,
	ПользовательИБПользовательОС = "",
	ПользовательИБАутентификацияСтандартная = Ложь)
	
	// Инициализация основных переменных
	СтрПользователь = "Пользователь";
	
	// Каждый раз по новой определяем набор пораметров,
	// а иначе в ОписаниеПользователяИБ будет не пустой ПользовательИБ
	НовоеОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	НовоеОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Истина;
	НовоеОписаниеПользователяИБ.ЗащитаОтОпасныхДействий = Ложь;
	НовоеОписаниеПользователяИБ.Вставить("Действие", "Записать");
	
	// Настраиваем параметры аутентификации
	НовоеОписаниеПользователяИБ.АутентификацияОС = ПользовательИБАутентификацияОС;
	НовоеОписаниеПользователяИБ.ПользовательОС = ПользовательИБПользовательОС;
	
	// Устанавливаем пароль, если требуется
	Если ЗадаватьПароль Тогда
		
		НовыйПароль = Пользователи.СоздатьПароль(СвойстваПароля);
		СоответствиеПользователя1С["ВременныйПароль"] = НовыйПароль;
		НовоеОписаниеПользователяИБ.Пароль = НовыйПароль;
		
	КонецЕсли;
	
	НовоеОписаниеПользователяИБ.АутентификацияСтандартная = ПользовательИБАутентификацияСтандартная;
	
	// Проверяем, нужно ли создавать нового пользователя
	Если Не ЗначениеЗаполнено(СоответствиеПользователя1С[СтрПользователь]) Тогда
		// Создаём нового пользователя
		
		// Форматируем имя пользователя
		ФамилияИнициалыФизЛица = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(СоответствиеПользователя1С["ФизЛицо"]);
		ФамилияИнициалыФизЛица = СтрЗаменить(ФамилияИнициалыФизЛица, ". ", ".");
		
		ПользовательДляОбработки = Справочники.Пользователи.СоздатьЭлемент();
		
		// Заполняем поля
		НовоеОписаниеПользователяИБ.Имя = ФамилияИнициалыФизЛица;
		НовоеОписаниеПользователяИБ.ПолноеИмя = ФамилияИнициалыФизЛица;
		ПользовательДляОбработки.Наименование = ФамилияИнициалыФизЛица;
		ПользовательДляОбработки.ФизическоеЛицо = СоответствиеПользователя1С["ФизЛицо"];
		//ПользовательДляОбработки.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", НовоеОписаниеПользователяИБ);
		
		//ПользовательДляОбработки.Записать();
		//
		//СоответствиеПользователя1С[СтрокаПользователь] = ПользовательДляОбработки.Ссылка;
		
	Иначе
		// Обновляем существующего пользователя
		
		// Форматируем имя
		СтрокаПользователь = Строка(СоответствиеПользователя1С[СтрПользователь]);
		
		ПользовательДляОбработки = СоответствиеПользователя1С[СтрПользователь].ПолучитьОбъект();
		
		// Обновляем поля
		ПользовательДляОбработки.Наименование = СтрокаПользователь;
		
		НовоеОписаниеПользователяИБ.Имя = СтрокаПользователь;
		НовоеОписаниеПользователяИБ.ПолноеИмя = СтрокаПользователь;
		
		ПользовательДляОбработки.Недействителен = Ложь;
		
		// ПользовательДляОбработки.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", НовоеОписаниеПользователяИБ);
		
		// ПользовательДляОбработки.Записать();
		
	КонецЕсли;
	
	// Добавляем описание пользователя и записываем
	ПользовательДляОбработки.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", НовоеОписаниеПользователяИБ);
	ПользовательДляОбработки.Записать();
	
	// Сохраняем ссылку на пользователя
	СоответствиеПользователя1С[СтрПользователь] = ПользовательДляОбработки.Ссылка;
	
КонецПроцедуры

// Процедура добавления или обновления пользователя в системе ТСД (Терминалов Сбора Данных)
// Параметры:
//   СтрокаТЧ - строка табличной части с данными пользователя и его настройками доступа
&НаСервереБезКонтекста
Процедура ДобавитьОбновитьПользователяТСД(СтрокаТЧ)
	
	// 1. ПОДГОТОВКА БАЗОВЫХ ПАРАМЕТРОВ
	// Получаем шаблон параметров для отправки данных в ТСД
	ПараметрыПользователяТСД = ПараметрыОтправкиПользователя();
	
	// Генерируем пароль для ТСД на основе ссылки пользователя
	// Используется числовой код для удобства ввода на терминале
	ПарольТСД = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТЧ.Пользователь);
	
	// 2. ФОРМИРОВАНИЕ СПИСКА СКЛАДОВ
	МассивСкладов = Новый Массив;
	
	// Перебираем все склады, указанные для пользователя
	Для каждого СтрокаСЗ Из СтрокаТЧ.Склады Цикл
		// Добавляем уникальные идентификаторы складов в массив
		МассивСкладов.Добавить(Строка(СтрокаСЗ.Значение.УникальныйИдентификатор()));
	КонецЦикла;
	
	// 3. ЗАПОЛНЕНИЕ ПАРАМЕТРОВ ПОЛЬЗОВАТЕЛЯ
	// Основные идентификационные данные
	ПараметрыПользователяТСД.id = Строка(СтрокаТЧ.Пользователь);
	ПараметрыПользователяТСД.name = Строка(СтрокаТЧ.Пользователь);
	
	// Данные для авторизации
	ПараметрыПользователяТСД.password = ПарольТСД;
	ПараметрыПользователяТСД.barcode = ПарольТСД; // Дублирование для совместимости
	
	// Настройки группы доступа
	ПараметрыПользователяТСД.groupId = СтрокаТЧ.ДоступВТСД;
	ПараметрыПользователяТСД.groupName = СтрокаТЧ.ДоступВТСД;
	
	// Привязка к складам
	ПараметрыПользователяТСД.warehouseIds = МассивСкладов;
	
	// 4. ОТПРАВКА ДАННЫХ В СИСТЕМУ ТСД
	Результат = ДобавитьПользователяВТСД(ПараметрыПользователяТСД);
	
	// 5. ОБРАБОТКА РЕЗУЛЬТАТА
	Если НЕ Результат Тогда
		// Формируем сообщение об ошибке
		ШаблонОшибки = "Ошибка отправки. Пользователь ""%1"" не добавлен в ТСД!";
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонОшибки, СтрокаТЧ.Пользователь));
	КонецЕсли;
	
КонецПроцедуры

// Добавляет пользователя в ТСД.
//
// Параметры:
//  ПараметрыДобавления - Структура - Параметры для добавления пользователя в ТСД.
//
// Возвращаемое значение:
//  Булево - Результат добавления пользователя в ТСД.
//
&НаСервереБезКонтекста
Функция ДобавитьПользователяВТСД(ПараметрыДобавления)
	
	Результат = Ложь;
	
	АдресРесурса = "/Users";
	ТелоЗапроса = ПЛ_МодульВебСервисов.ПреобразоватьВJSON(ПараметрыДобавления, "ДобавитьПользователяВТСД");
	ПараметрыОтвета = УниверсальныеМеханизмыWS.ВыполнитьHTTPМетодMobileSmarts("POST", АдресРесурса, ТелоЗапроса);
	
	Если ПараметрыОтвета.КодСостояния = 200 ИЛИ ПараметрыОтвета.КодСостояния = 201 Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает начало выбора значения в колонке "Склады" таблицы ТЗДанные.
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы, для которого обрабатывается событие.
//  ДанныеВыбора - СписокЗначений - список значений для выбора.
//  ВыборДобавлением - Булево - признак выбора добавлением.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
// Описание:
//  Устанавливает тип значения для колонки "Склады" текущей строки таблицы ТЗДанные как СправочникСсылка.Склады,
//  если текущая строка таблицы не равна Неопределено.
//
&НаКлиенте
Процедура ТЗДанныеСкладыНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТЗДанные.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
		ТекущиеДанные.Склады.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора физического лица в форме
// Вызывается при выборе значения в поле выбора физического лица
//
// Параметры:
//   Элемент - элемент формы, вызвавший событие
//   ВыбранноеЗначение - выбранное физическое лицо (ссылка на справочник)
//   ДополнительныеДанные - дополнительные параметры выбора
//   СтандартнаяОбработка - флаг стандартной обработки (можно отменить)
&НаКлиенте
Процедура ФизЛицоИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	// 1. ПОИСК ПОЛЬЗОВАТЕЛЯ ПО ФИЗИЧЕСКОМУ ЛИЦУ
	// Получаем пользователя, связанного с выбранным физическим лицом
	ПользовательИсточник = ПользовательПоФизическомуЛицу(ВыбранноеЗначение);
	
	// Если пользователь не найден - завершаем обработку
	Если Не ЗначениеЗаполнено(ПользовательИсточник) Тогда
		Возврат;
	КонецЕсли;
	
	// 2. ПОЛУЧЕНИЕ ДАННЫХ АУТЕНТИФИКАЦИИ
	// Получаем информацию о способах аутентификации пользователя
	АутентификацияПользователя = АутентификацияПользователяНаСервере(ПользовательИсточник);
	
	// Сохраняем данные аутентификации в переменные формы:
	// - Стандартная аутентификация (логин/пароль)
	ПользовательИБАутентификацияСтандартнаяИсточник = АутентификацияПользователя.АутентификацияСтандартная;
	// - Аутентификация через ОС (Windows)
	ПользовательИБАутентификацияОСИсточник = АутентификацияПользователя.АутентификацияОС;
	// - Имя пользователя ОС (для доменной аутентификации)
	ПользовательИБПользовательОСИсточник = АутентификацияПользователя.ПользовательОС;
	
	// 3. ЗАПОЛНЕНИЕ ТАБЛИЧНЫХ ЧАСТЕЙ
	// Заполняем табличные части группами пользователя:
	// - Группы пользователей
	ОчиститьЗаполнитьТЧ("ГруппыПользователейИсточника", ПользовательИсточник, "ГруппыПользователей");
	// - Группы доступа
	ОчиститьЗаполнитьТЧ("ГруппыДоступаИсточника", ПользовательИсточник, "ГруппыДоступа");
	
	// 4. ПОЛИТИКА ПАРОЛЕЙ
	// Проверяем, требуется ли смена пароля при входе
	ПотребоватьСменуПароляПриВходеИсточник = ПотребоватьСменуПароляПриВходе(ПользовательИсточник);
	
	// 5. НАСТРОЙКИ ДОСТУПА К ТСД
	// Получаем настройки доступа к терминалам сбора данных
	ДоступСкладыТСД(ПользовательИсточник, ДоступВТСДИсточник, СкладыТСДИсточник);
	
	// 6. ОБНОВЛЕНИЕ ИНТЕРФЕЙСА
	// Обновляем доступность элементов формы в зависимости от полученных данных
	ОбновитьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура получает доступ к складам для пользователя ТСД.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого необходимо получить доступ к складам.
//  ДоступВТСД - Число - Группа доступа пользователя в ТСД.
//  СкладыТСД - Массив - Массив ссылок на склады, к которым пользователь имеет доступ в ТСД.
//
&НаСервере
Процедура ДоступСкладыТСД(Знач Пользователь, ДоступВТСД, СкладыТСД)
	
	
	ДоступВТСД = "";
	СкладыТСД.Очистить();
	
	ШаблонАдреса = "/Users(%1)";
	АдресРесурса = СтрШаблон(ШаблонАдреса, Строка(Пользователь));
	
	МетодЗапроса = "GET";
	
	ПараметрыОтвета = УниверсальныеМеханизмыWS.ВыполнитьHTTPМетодMobileSmarts(МетодЗапроса, АдресРесурса);
	
	Если ПараметрыОтвета.КодСостояния = 200 Или ПараметрыОтвета.КодСостояния = 204 Тогда
		
		СтруктураОтвета = ПЛ_МодульВебСервисов.ПреобразоватьИЗJSON(ПараметрыОтвета.ТелоСтрокой, , Истина);
		
		ДоступВТСД = СтруктураОтвета["groupId"];
		
		Для Каждого warehouseId Из СтруктураОтвета["warehouseIds"] Цикл
			
			СкладыТСД.Добавить(Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(warehouseId)));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает и заполняет табличную часть объекта данными групп доступа пользователя.
//
// Параметры:
//  ИмяТЧ - Строка - Имя табличной части объекта.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого необходимо получить группы доступа.
//  ТипГруппы - ПеречислениеСсылка.ТипыГруппДоступа - Тип групп доступа, которые необходимо получить.
//
&НаСервере
Процедура ОчиститьЗаполнитьТЧ(Знач ИмяТЧ, Знач Пользователь, Знач ТипГруппы)
	
	ЭтотОбъект[ИмяТЧ].Очистить();
	ЭтотОбъект[ИмяТЧ].Загрузить(ГруппыДоступаПользователя(Пользователь, ТипГруппы));
	
КонецПроцедуры

// Проверяет необходимость смены пароля при входе для указанного пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь,
// для которого необходимо проверить необходимость смены пароля.
//
// Возвращаемое значение:
//  Булево - Истина, если необходимо потребовать смену пароля при входе, иначе Ложь.
//
&НаСервереБезКонтекста
Функция ПотребоватьСменуПароляПриВходе(Знач Пользователь)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователях.ПотребоватьСменуПароляПриВходе КАК ПотребоватьСменуПароляПриВходе
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ПотребоватьСменуПароляПриВходе;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с информацией об аутентификации пользователя.
//
// Параметры:
//  ПользовательИсточник - СправочникСсылка.Пользователи - Пользователь,
// для которого необходимо получить информацию об аутентификации.
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//   * АутентификацияСтандартная - Булево - Признак аутентификации пользователя стандартными средствами 1С.
//   * АутентификацияОС - Булево - Признак аутентификации пользователя средствами операционной системы.
//   * ПользовательОС - Строка - Имя пользователя операционной системы.
&НаСервереБезКонтекста
Функция АутентификацияПользователяНаСервере(Знач ПользовательИсточник)
	
	Результат = Новый Структура("АутентификацияСтандартная, АутентификацияОС, ПользовательОС");
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИсточник,
			"ИдентификаторПользователяИБ");
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	
	Если ЗначениеЗаполнено(СвойстваПользователяИБ) Тогда
		
		Результат.АутентификацияСтандартная = СвойстваПользователяИБ.АутентификацияСтандартная;
		Результат.АутентификацияОС = СвойстваПользователяИБ.АутентификацияОС;
		Результат.ПользовательОС = СвойстваПользователяИБ.ПользовательОС;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает событие изменения элемента "ПользовательИБАутентификацияОСИсточник".
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы, для которого произошло событие изменения.
//
&НаКлиенте
Процедура ПользовательИБАутентификацияОСИсточникПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура обновляет доступность элементов формы в зависимости от значений реквизитов.
//
// Параметры:
//  ПользовательИБАутентификацияОСИсточник - Булево - Признак аутентификации пользователя ИБ по ОС для источника.
//  ПользовательИБАутентификацияОСПриемник - Булево - Признак аутентификации пользователя ИБ по ОС для приемника.
//  ПолныеПрава - Булево - Признак наличия полных прав у текущего пользователя.
//
&НаКлиенте
Процедура ОбновитьДоступностьЭлементов()
	
	Элементы.ПользовательИБПользовательОСИсточник.Доступность = ПользовательИБАутентификацияОСИсточник;
	Элементы.ПользовательИБПользовательОСПриемник.Доступность = ПользовательИБАутентификацияОСПриемник;
	Элементы.ГруппыДоступаИсточника.Доступность = ПолныеПрава;
	Элементы.ГруппыДоступаПриемника.Доступность = ПолныеПрава;
	
КонецПроцедуры

// Возвращает таблицу значений с группами доступа пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого необходимо получить группы доступа.
//  ТипГруппы - Строка - Тип группы доступа, может принимать значения "ГруппыПользователей" или "ГруппыДоступа".
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений с колонкой "ГруппаПользователей"
// или "ГруппаДоступа" в зависимости от значения параметра ТипГруппы.
//
&НаСервереБезКонтекста
Функция ГруппыДоступаПользователя(Знач Пользователь, ТипГруппы)
	
	Если ТипГруппы = "ГруппыПользователей" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|ГДЕ
			|	ГруппыПользователейСостав.Пользователь = &Пользователь";
		
	ИначеЕсли ТипГруппы = "ГруппыДоступа" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|ГДЕ
			|	ГруппыДоступаПользователи.Пользователь = &Пользователь";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ТЗДанныеДоступВТСДПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТЗДанные.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекДанные.Склады) Тогда
		ТекДанные.Склады = СкладыДляЗагрузки.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаСклад" Тогда
		ТЗДанные.Очистить();
	Иначе
		
		НомерЗадачиБитрикс = "";
		
		// Источник
		ФизЛицоИсточник = Неопределено;
		ПользовательИсточник = Неопределено;
		ПользовательИБАутентификацияСтандартнаяИсточник = Ложь;
		ПотребоватьСменуПароляПриВходеИсточник = Ложь;
		ПользовательИБАутентификацияОСИсточник = Ложь;
		ПользовательИБПользовательОСИсточник = Неопределено;
		ГруппыПользователейИсточника.Очистить();
		ГруппыДоступаИсточника.Очистить();
		ДоступВТСДИсточник = Неопределено;
		СкладыТСДИсточник = Неопределено;
		
		// Приемник
		ФизЛицоПриемник = Неопределено;
		ПользовательПриемник = Неопределено;
		ПользовательИБАутентификацияСтандартнаяПриемник = Ложь;
		ПотребоватьСменуПароляПриВходеПриемник = Ложь;
		ПользовательИБАутентификацияОСПриемник = Ложь;
		ПользовательИБПользовательОСПриемник = Неопределено;
		ГруппыПользователейПриемника.Очистить();
		ГруппыДоступаПриемника.Очистить();
		ДоступВТСДПриемник = Неопределено;
		СкладыТСДПриемник = Неопределено;
		ВременныйПарольПриемник = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеНастройки(ПользовательИсточник, ПользовательПриемник)
	
	КопируемыеНастройки = Новый Массив;
	КопируемыеНастройки.Добавить("НастройкиОтчетов");
	КопируемыеНастройки.Добавить("НастройкиВнешнегоВида");
	КопируемыеНастройки.Добавить("ПерсональныеНастройки");
	КопируемыеНастройки.Добавить("Избранное");
	КопируемыеНастройки.Добавить("НастройкиПечати");
	КопируемыеНастройки.Добавить("ПрочиеПользовательскиеНастройки");
	
	Приемники = Новый Массив;
	Приемники.Добавить(ПользовательПриемник);
	
	Обработки.НастройкиПользователей.КопированиеНастроекПользователей(ПользовательИсточник, Приемники,
		КопируемыеНастройки);
	
КонецПроцедуры

#Область РаботаСПользователями

#КонецОбласти

#Область РаботаСБитриксом24

#КонецОбласти

#КонецОбласти
